apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'kotlin'

afterEvaluate {
    rootProject.tasks.coverageReport.additionalSourceDirs.setFrom rootProject.tasks.coverageReport.additionalSourceDirs.files + files(it.sourceSets.main.allSource.srcDirs)
    rootProject.tasks.coverageReport.sourceDirectories.setFrom rootProject.tasks.coverageReport.sourceDirectories.files + files(it.sourceSets.main.allSource.srcDirs)
    rootProject.tasks.coverageReport.classDirectories.setFrom rootProject.tasks.coverageReport.classDirectories.files + files(it.sourceSets.main.output)
}


tasks.withType(JavaCompile) {
    options.debug = true
}

compileJava {
    targetCompatibility = '8'
    sourceCompatibility = '8'
}


[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava.options.compilerArgs \
        << '-Xlint:unchecked' << '-Xlint:deprecation'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation 'org.objenesis:objenesis:3.1'
    testImplementation ('org.spockframework:spock-core:2.0-M2-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation "nl.jqno.equalsverifier:equalsverifier:3.3"
    testImplementation 'org.codehaus.groovy:groovy-all:3.0.3'
    testImplementation 'commons-codec:commons-codec:1.14'
    testImplementation 'cglib:cglib-nodep:3.3.0'
}

buildscript {
    ext.kotlin_version = '1.8.21'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
repositories {
    mavenCentral()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    jvmArgs '-ea'
    systemProperty "java.library.path", file("${project.rootDir}/polkaj-schnorrkel/build/rust/release").absolutePath
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
}

// Must be after sourceSets closure
jacocoTestReport {
    dependsOn tasks.test

    //noinspection GroovyAssignabilityCheck
    sourceSets sourceSets.main
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}
tasks.check.dependsOn tasks.jacocoTestReport
rootProject.tasks.coverageReport.dependsOn tasks.test
test.finalizedBy jacocoTestReport

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jacoco {
    toolVersion = "0.8.5"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version

            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Polkadot Java Client'
                description = 'Java client library to access Polkadot based networks'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')

    dryRun=false
    publish=true
    override=true

    publications = ['mavenJava']

    pkg {
        userOrg = 'emerald'
        repo = 'polkaj'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/emeraldpay/polkaj.git'
        labels = ['polkadot', 'blockchain']
        publicDownloadNumbers = true

        version {
            name = project.version
            description = 'PolkaJ ' + project.version
            released  = new Date()
            vcsTag = project.version

            gpg {
                sign = true
            }
        }
    }
}